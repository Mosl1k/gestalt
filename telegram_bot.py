import os
import json
import requests
from base64 import b64encode
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = os.getenv("API_URL", "http://geshtalt:8080")
USERNAME = os.getenv("USERNAME")
PASSWORD = os.getenv("PASSWORD")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
LISTS = {
    "–∫—É–ø–∏—Ç—å": "–ü–æ–∫—É–ø–∫–∏",
    "–Ω–µ-–∑–∞–±—ã—Ç—å": "–ù–µ –∑–∞–±—ã—Ç—å",
    "—Ö–æ–ª–æ–¥–æ—Å": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
    "–¥–æ–º": "–î–æ–º",
    "–º–∞—à–∏–Ω–∞": "–ú–∞—à–∏–Ω–∞"
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
PRIORITY_EMOJI = {
    3: "üî•",  # –í—ã—Å–æ–∫–∏–π
    2: "üü°",  # –°—Ä–µ–¥–Ω–∏–π
    1: "üü¢"   # –ù–∏–∑–∫–∏–π
}

# –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
CATEGORIES = list(LISTS.keys())

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"list:{key}")]
        for key, name in LISTS.items()
    ]
    keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add")])
    keyboard.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete")])
    keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="change_category")])
    keyboard.append([InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data="change_priority")])
    keyboard.append([InlineKeyboardButton("–†–µ—Å—Ç–∞—Ä—Ç", callback_data="restart")])
    return InlineKeyboardMarkup(keyboard)

def get_list_keyboard(current_category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ù–∞–∑–∞–¥, –ü—Ä–µ–¥—ã–¥—É—â–∏–π, –°–ª–µ–¥—É—é—â–∏–π, –î–æ–±–∞–≤–∏—Ç—å."""
    current_index = CATEGORIES.index(current_category)
    prev_category = CATEGORIES[(current_index - 1) % len(CATEGORIES)]
    next_category = CATEGORIES[(current_index + 1) % len(CATEGORIES)]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="restart")],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"list:{prev_category}"),
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"list:{next_category}")
        ],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add:{current_category}")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    reply_markup = get_main_keyboard()
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def add_start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    data = query.data
    category = data.split(":")[1] if data.startswith("add:") else None
    context.user_data["awaiting_item"] = True
    context.user_data["category"] = category
    await query.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è{' –≤ ' + LISTS[category] if category else ''}:"
    )

async def handle_item_text(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞."""
    if not context.user_data.get("awaiting_item"):
        return

    item_name = update.message.text
    action = context.user_data.get("action")

    if action == "delete":
        context.user_data["item_name"] = item_name
        context.user_data["awaiting_item"] = False
        context.user_data["awaiting_category"] = True
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"delete_from:{key}")]
            for key, name in LISTS.items()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–∏—Ç—å '{item_name}'?", reply_markup=reply_markup)
    elif action == "change_category":
        context.user_data["item_name"] = item_name
        context.user_data["awaiting_item"] = False
        context.user_data["awaiting_old_category"] = True
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"change_cat_from:{key}")]
            for key, name in LISTS.items()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ '{item_name}'?", reply_markup=reply_markup)
    elif action == "change_priority":
        context.user_data["item_name"] = item_name
        context.user_data["awaiting_item"] = False
        context.user_data["awaiting_category"] = True
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"change_pri_from:{key}")]
            for key, name in LISTS.items()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–í –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è '{item_name}'?", reply_markup=reply_markup)
    else:
        context.user_data["item_name"] = item_name
        context.user_data["awaiting_item"] = False
        if context.user_data.get("category"):
            await add_to_category(update, context)
        else:
            context.user_data["awaiting_category"] = True
            keyboard = [
                [InlineKeyboardButton(name, callback_data=f"add_to:{key}")]
                for key, name in LISTS.items()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å '{item_name}'?", reply_markup=reply_markup)

async def add_to_category(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    category = context.user_data.get("category")
    if not category:
        query = update.callback_query
        await query.answer()
        data = query.data
        if not data.startswith("add_to:"):
            return
        category = data.split(":")[1]

    if category not in LISTS:
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        return

    item_name = context.user_data.get("item_name")
    context.user_data["awaiting_category"] = False
    context.user_data.pop("item_name", None)
    context.user_data.pop("category", None)

    try:
        auth_str = f"{USERNAME}:{PASSWORD}"
        auth_header = {"Authorization": f"Basic {b64encode(auth_str.encode()).decode()}", "Content-Type": "application/json"}

        data = {
            "name": item_name,
            "category": category,
            "bought": False,
            "priority": 2
        }

        response = requests.post(f"{API_URL}/add", headers=auth_header, json=data)
        if response.status_code != 201:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return

        reply_markup = get_list_keyboard(category)
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ '{item_name}' –≤ {LISTS[category]}", reply_markup=reply_markup)
    except requests.RequestException as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def delete_start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_item"] = True
    context.user_data["action"] = "delete"
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

async def delete_from_category(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("awaiting_category"):
        return

    data = query.data
    if not data.startswith("delete_from:"):
        return

    category = data.split(":")[1]
    if category not in LISTS:
        await query.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        return

    item_name = context.user_data.get("item_name")
    context.user_data["awaiting_category"] = False
    context.user_data.pop("item_name", None)
    context.user_data.pop("action", None)

    try:
        auth_str = f"{USERNAME}:{PASSWORD}"
        auth_header = {"Authorization": f"Basic {b64encode(auth_str.encode()).decode()}"}

        response = requests.delete(f"{API_URL}/delete/{item_name}?category={category}", headers=auth_header)
        if response.status_code != 200:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return

        reply_markup = get_list_keyboard(category)
        await query.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ '{item_name}' –∏–∑ {LISTS[category]}", reply_markup=reply_markup)
    except requests.RequestException as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
    except Exception as e:
        await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def change_category_start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_item"] = True
    context.user_data["action"] = "change_category"
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

async def change_category_from(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("awaiting_old_category"):
        return

    data = query.data
    if not data.startswith("change_cat_from:"):
        return

    old_category = data.split(":")[1]
    if old_category not in LISTS:
        await query.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {old_category}")
        return

    context.user_data["old_category"] = old_category
    context.user_data["awaiting_old_category"] = False
    context.user_data["awaiting_new_category"] = True

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"change_cat_to:{key}")]
        for key, name in LISTS.items() if key != old_category
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ '{context.user_data['item_name']}'?", reply_markup=reply_markup)

async def change_category_to(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("awaiting_new_category"):
        return

    data = query.data
    if not data.startswith("change_cat_to:"):
        return

    new_category = data.split(":")[1]
    if new_category not in LISTS:
        await query.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {new_category}")
        return

    item_name = context.user_data.get("item_name")
    old_category = context.user_data.get("old_category")
    context.user_data["awaiting_new_category"] = False
    context.user_data.pop("item_name", None)
    context.user_data.pop("old_category", None)

    try:
        auth_str = f"{USERNAME}:{PASSWORD}"
        auth_header = {"Authorization": f"Basic {b64encode(auth_str.encode()).decode()}", "Content-Type": "application/json"}

        response = requests.get(f"{API_URL}/list?category={old_category}", headers=auth_header)
        if response.status_code != 200:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}")
            return

        items = response.json()
        item = next((i for i in items if i["name"] == item_name), None)
        if not item:
            await query.message.reply_text(f"–≠–ª–µ–º–µ–Ω—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {LISTS[old_category]}")
            return

        data = {
            "name": item_name,
            "category": new_category,
            "bought": item["bought"],
            "priority": item["priority"]
        }

        response = requests.put(f"{API_URL}/edit/{item_name}?oldCategory={old_category}", headers=auth_header, json=data)
        if response.status_code != 200:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {response.status_code} - {response.text}")
            return

        reply_markup = get_list_keyboard(new_category)
        await query.message.reply_text(f"–≠–ª–µ–º–µ–Ω—Ç '{item_name}' –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ {LISTS[old_category]} –≤ {LISTS[new_category]}", reply_markup=reply_markup)
    except requests.RequestException as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
    except Exception as e:
        await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def change_priority_start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_item"] = True
    context.user_data["action"] = "change_priority"
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:")

async def change_priority_from(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("awaiting_category"):
        return

    data = query.data
    if not data.startswith("change_pri_from:"):
        return

    category = data.split(":")[1]
    if category not in LISTS:
        await query.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        return

    context.user_data["category"] = category
    context.user_data["awaiting_category"] = False
    context.user_data["awaiting_priority"] = True

    keyboard = [
        [InlineKeyboardButton(f"–í—ã—Å–æ–∫–∏–π {PRIORITY_EMOJI[3]}", callback_data="pri:3")],
        [InlineKeyboardButton(f"–°—Ä–µ–¥–Ω–∏–π {PRIORITY_EMOJI[2]}", callback_data="pri:2")],
        [InlineKeyboardButton(f"–ù–∏–∑–∫–∏–π {PRIORITY_EMOJI[1]}", callback_data="pri:1")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è '{context.user_data['item_name']}' –≤ {LISTS[category]}:", reply_markup=reply_markup)

async def change_priority_to(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("awaiting_priority"):
        return

    data = query.data
    if not data.startswith("pri:"):
        return

    new_priority = int(data.split(":")[1])
    item_name = context.user_data.get("item_name")
    category = context.user_data.get("category")
    context.user_data["awaiting_priority"] = False
    context.user_data.pop("item_name", None)
    context.user_data.pop("category", None)

    try:
        auth_str = f"{USERNAME}:{PASSWORD}"
        auth_header = {"Authorization": f"Basic {b64encode(auth_str.encode()).decode()}", "Content-Type": "application/json"}

        response = requests.get(f"{API_URL}/list?category={category}", headers=auth_header)
        if response.status_code != 200:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}")
            return

        items = response.json()
        item = next((i for i in items if i["name"] == item_name), None)
        if not item:
            await query.message.reply_text(f"–≠–ª–µ–º–µ–Ω—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {LISTS[category]}")
            return

        data = {
            "name": item_name,
            "category": category,
            "bought": item["bought"],
            "priority": new_priority
        }

        response = requests.put(f"{API_URL}/edit/{item_name}?oldCategory={category}", headers=auth_header, json=data)
        if response.status_code != 200:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {response.status_code} - {response.text}")
            return

        reply_markup = get_list_keyboard(category)
        await query.message.reply_text(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è '{item_name}' –≤ {LISTS[category]} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {PRIORITY_EMOJI[new_priority]}", reply_markup=reply_markup)
    except requests.RequestException as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
    except Exception as e:
        await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def show_item_actions(update: Update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("item:"):
        return

    item_name, category = data.split(":")[1:3]
    context.user_data["item_name"] = item_name
    context.user_data["category"] = category

    keyboard = [
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"item_action:delete:{item_name}:{category}")],
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"item_action:change_cat:{item_name}:{category}")],
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"item_action:change_pri:{item_name}:{category}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"list:{category}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å '{item_name}' –≤ {LISTS[category]}?", reply_markup=reply_markup)

async def handle_item_action(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º."""
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("item_action:"):
        return

    action, item_name, category = data.split(":")[1:4]
    context.user_data["item_name"] = item_name
    context.user_data["category"] = category

    if action == "delete":
        try:
            auth_str = f"{USERNAME}:{PASSWORD}"
            auth_header = {"Authorization": f"Basic {b64encode(auth_str.encode()).decode()}"}

            response = requests.delete(f"{API_URL}/delete/{item_name}?category={category}", headers=auth_header)
            if response.status_code != 200:
                await query.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return

            reply_markup = get_list_keyboard(category)
            await query.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ '{item_name}' –∏–∑ {LISTS[category]}", reply_markup=reply_markup)
        except requests.RequestException as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        except Exception as e:
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    elif action == "change_cat":
        context.user_data["awaiting_new_category"] = True
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"change_cat_to:{key}")]
            for key, name in LISTS.items() if key != category
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(f"–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ '{item_name}'?", reply_markup=reply_markup)
    elif action == "change_pri":
        context.user_data["awaiting_priority"] = True
        keyboard = [
            [InlineKeyboardButton(f"–í—ã—Å–æ–∫–∏–π {PRIORITY_EMOJI[3]}", callback_data="pri:3")],
            [InlineKeyboardButton(f"–°—Ä–µ–¥–Ω–∏–π {PRIORITY_EMOJI[2]}", callback_data="pri:2")],
            [InlineKeyboardButton(f"–ù–∏–∑–∫–∏–π {PRIORITY_EMOJI[1]}", callback_data="pri:1")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è '{item_name}' –≤ {LISTS[category]}:", reply_markup=reply_markup)

async def button_callback(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "restart":
        await start(update, context)
        return
    if data == "add":
        await add_start(update, context)
        return
    if data == "delete":
        await delete_start(update, context)
        return
    if data == "change_category":
        await change_category_start(update, context)
        return
    if data == "change_priority":
        await change_priority_start(update, context)
        return
    if data.startswith("add_to:"):
        await add_to_category(update, context)
        return
    if data.startswith("delete_from:"):
        await delete_from_category(update, context)
        return
    if data.startswith("change_cat_from:"):
        await change_category_from(update, context)
        return
    if data.startswith("change_cat_to:"):
        await change_category_to(update, context)
        return
    if data.startswith("change_pri_from:"):
        await change_priority_from(update, context)
        return
    if data.startswith("pri:"):
        await change_priority_to(update, context)
        return
    if data.startswith("item:"):
        await show_item_actions(update, context)
        return
    if data.startswith("item_action:"):
        await handle_item_action(update, context)
        return
    if data.startswith("list:"):
        list_type = data.split(":")[1]
        if list_type not in LISTS:
            await query.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {list_type}")
            return

        try:
            auth_str = f"{USERNAME}:{PASSWORD}"
            auth_header = {"Authorization": f"Basic {b64encode(auth_str.encode()).decode()}"}

            response = requests.get(f"{API_URL}/list?category={list_type}", headers=auth_header)
            if response.status_code != 200:
                await query.message.reply_text(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return

            items = response.json()
            if not items:
                response_text = f"{LISTS[list_type]} –ø—É—Å—Ç."
                reply_markup = get_list_keyboard(list_type)
                await query.message.reply_text(response_text, reply_markup=reply_markup)
                return

            response_text = f"{LISTS[list_type]}:\n"
            keyboard = []
            for item in items:
                priority = item["priority"]
                emoji = PRIORITY_EMOJI.get(priority, "üü°")
                response_text += f"- {emoji} {item['name']}\n"
                keyboard.append([InlineKeyboardButton(item['name'], callback_data=f"item:{item['name']}:{list_type}")])

            keyboard.extend(get_list_keyboard(list_type).inline_keyboard)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(response_text, reply_markup=reply_markup)
        except requests.RequestException as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        except json.JSONDecodeError:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API.")
        except Exception as e:
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TELEGRAM_TOKEN:
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return
    if not USERNAME or not PASSWORD:
        print("–û—à–∏–±–∫–∞: USERNAME –∏–ª–∏ PASSWORD –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env")
        return
    if not API_URL:
        print("–û—à–∏–±–∫–∞: API_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_item_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()